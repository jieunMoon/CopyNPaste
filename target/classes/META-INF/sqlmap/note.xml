<?xml version="1.0" encoding="UTF-8"?>
<!-- 
@Project : copyNpaste
@File name : note.xml 
@Date : 2018.10.06 
@Author : 우나연 
@Desc 	: note dao 매퍼 쿼리문 작성. -->		

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="tk.copyNpaste.mapper.NoteMapper">

	<!--주제별 상위노트 목록 보기 -->
	<select id="selectTopNote" resultType="NoteVO">
	select n.noteNum, n.folderName, n.userEmail, n.noteTitle, n.noteContent, n.noteDate,
	n.subjectCode, n.noteCount, n.notePublic, n.notescrap, n.notePNum, n.noteThumnail, u.userNick
	from note n join users u on u.userEmail=n.userEmail 
				join subject s on s.subjectCode=n.subjectCode 
	where s.subjectName = #{subjectName} 
	and n.notePublic=1 and n.noteBlind=0 and n.notescrap=0<!-- 공개1 블라인드0 스크랩글 아닌것0-->
	order by n.noteCount desc, n.noteDate desc 
	limit 4;
	</select>

	<!--회원의 MY노트 목록 보기 -->
	<select id="selectAllNote" parameterType="hashmap" resultType="NoteVO">
	select n.noteNum, n.folderName, n.userEmail, n.noteTitle, n.noteContent, n.noteDate, n.noteScrap,
	n.subjectCode, n.noteCount, n.notePublic, n.notescrap, n.notePNum, n.noteThumnail, u.userNick, n.noteBlind
	from note n join users u on u.userEmail=n.userEmail 
	where u.userEmail = #{userEmail} <!-- 공개1 블라인드0 -->
	order by noteNum desc limit ${page},12 
	</select>
	

	<!-- 노트 상세 보기(+노트 작성) -->
	<select id="selectDetailNote" resultType="NoteVO">
	select n.noteNum, n.folderName, n.userEmail, n.noteTitle, n.noteContent, n.noteDate,
	n.subjectCode, s.subjectName, n.noteCount, n.notePublic, n.noteScrap, n.notePNum, u.userNick, n.noteBlind
	from note n join users u on u.userEmail=n.userEmail 
				join subject s on s.subjectCode=n.subjectCode 
				where noteNum = #{noteNum};
	</select>
	
	<!-- 노트 댓글 보기 -->
	<select id="selectAllNoteComm" resultType="NoteCommVO">
	select nc.noteCommNum, nc.userEmail, nc.noteNum, nc.commDept,nc.noteCommBlind, nc.commContent, nc.commDate, nc.noteCommPNum, u.userNick, u.userPhoto, u.userSocialStatus, nc.noteCommPos
	from noteComm nc join users u on u.userEmail=nc.userEmail where noteNum = #{nc.noteNum} order by nc.noteCommPNum , nc.noteCommNum
	</select>
	
	<!-- //노트 댓글 작성 -->
 	<insert id="insertNoteComm">
     	insert into noteComm(noteNum,userEmail,commContent)
		values (#{noteNum},#{userEmail},#{commContent})
		<selectKey order="AFTER" keyProperty="num" resultType="Integer">
			select LAST_INSERT_ID() as num;
		</selectKey>
    </insert>
    <update id="updateInsertNoteComm">
		update noteComm set noteCommPNum=#{num} where noteCommNum=#{num}
	</update>
	
    <!-- //대댓글 작성전 Pos수정  -->
	<update id="updateNoteCommComm">
		update NoteComm set NoteCommPos=NoteCommPos+1
		where NoteCommPos>#{NoteCommPos}
	</update>
	
    <!-- //대댓글 작성 -->
	<insert id="insertNoteCommComm">
		<selectKey order="BEFORE" keyProperty="noteCommPos" resultType="int">
   	   		select (noteCommPos+1) from noteComm where noteCommNum=#{noteCommNum}
     	</selectKey>
		insert into noteComm(noteNum,userEmail,commContent,CommDept,noteCommPNum,noteCommPos)
		values (#{noteNum},#{userEmail},#{commContent},1,#{noteCommNum},#{noteCommPos})
  	</insert>    
    
    <!-- 대댓글 있을때 삭제 (블라인드) -->
	<update id="blindNoteComm">
	 update NoteComm set noteCommBlind=1
	 where noteCommNum in 
		 (select nc1.noteCommPNum from noteComm nc, noteComm nc1 
	 	  where nc.noteCommPNum = nc1.noteCommNum and nc.commDept =1) 
	 and noteCommNum = #{noteCommNum}
	</update>
	<!-- 대댓글  없을때 삭제 -->
	<delete id="deleteNoteComm">
	    delete from noteComm where noteCommNum = #{noteCommNum} 
	</delete>

	<!-- 노트 등록 -->
	<insert id="insertNote" useGeneratedKeys="true" keyProperty="noteNum">
        <selectKey order="BEFORE" keyProperty="noteNum" resultType="int">
           select ifnull(max(noteNum)+1,0) from note 
        </selectKey>
        insert into note(noteNum, folderName, userEmail, noteTitle, noteContent, subjectCode, notePublic, noteThumnail)
        values(#{noteNum}, #{folderName}, #{userEmail}, #{noteTitle}, #{noteContent}, #{subjectCode}, #{notePublic}, #{noteThumnail})
    </insert>
    
    <!-- 노트 주제 조회 -->
    <select id="selectSubjectCode" resultType="NoteVO">
	select subjectCode, subjectName from subject
	</select>

	<!-- 노트 수정 -->
	<update id="updateNote">
		 update note 
			SET noteTitle=#{noteTitle},
				noteContent=#{noteContent}, 
				folderName=#{folderName},
				subjectCode=#{subjectCode},
				noteThumnail=#{noteThumnail},
				notePublic=#{notePublic}
		  WHERE noteNum=#{noteNum}
	</update>
	
	<!-- 노트 삭제 -->
	<delete id="deleteNote">
		DELETE FROM note WHERE noteNum = #{noteNum}
	</delete>
	
	<!--my노트 폴더별 조회 -->
	<select id="selectByFolderNote" resultType="NoteVO">
	select n.noteNum, n.folderName, n.userEmail, n.noteTitle, n.noteContent, n.noteDate,
	n.subjectCode, n.noteCount, n.notePublic, n.notescrap, n.notePNum, n.noteThumnail, u.userNick
	from note n join users u on u.userEmail=n.userEmail 
	where u.userEmail = #{userEmail} and n.folderName =#{folderName}
	order by noteNum desc limit ${page},12 
	</select>
	
	<!-- my 노트 정렬 -->
	  <select id="selectOrderbyNote" parameterType="hashmap" resultType="NoteVO">
	  select n.noteNum, n.folderName, n.userEmail, n.noteTitle, n.noteContent, n.noteDate,
      n.subjectCode, n.noteCount, n.notePublic, n.notescrap, n.notePNum, n.noteThumnail, u.userNick
      from note n join users u on u.userEmail=n.userEmail 
      where u.userEmail = #{userEmail} 
      order by 
          Case when #{sortCategory}='n.noteDate desc' then n.noteDate End desc,
          Case when #{sortCategory}='n.noteDate asc' then n.noteDate End asc,
          Case when #{sortCategory}='binary(n.noteTitle)' then binary(n.noteTitle) End asc,
          Case when #{sortCategory}='n.noteNum' then n.noteNum End desc
      limit ${page},12     
       </select>

 
	
	<!--my 노트 달력 검색 -->
	<select id="selectByCalNote" parameterType="hashmap" resultType="NoteVO">
	select n.noteNum, n.folderName, n.userEmail, n.noteTitle, n.noteContent, n.noteDate,
	n.subjectCode,s.subjectName, n.noteCount, n.notePublic, n.notescrap, n.notePNum, n.noteThumnail, u.userNick
	from note n join users u on u.userEmail=n.userEmail 
	join subject s on s.subjectCode=n.subjectCode 
	where n.noteDate between #{fromDate} and #{toDate} and n.userEmail=#{userEmail}
	order by n.noteDate limit ${page},12 
	</select>
	
	<!-- my노트 키워드 검색 -->
	<select id="selectByKeyNote"  parameterType="hashmap" resultType="NoteVO">
  	select n.noteNum, n.folderName, n.userEmail, n.noteTitle, n.noteContent, n.noteDate,
	n.subjectCode,s.subjectName, n.noteCount, n.notePublic, n.notescrap, n.notePNum, n.noteThumnail, u.userNick
	from note n join users u on u.userEmail=n.userEmail 
				join subject s on s.subjectCode=n.subjectCode 
	where n.userEmail = #{userEmail} and 
		 (n.noteTitle like CONCAT('%',#{keyword},'%') or 
		  n.noteContent like CONCAT('%',#{keyword},'%') or 
		  n.folderName like CONCAT('%',#{keyword},'%') or 
		  s.subjectName like CONCAT('%',#{keyword},'%'))
	order by noteNum desc limit ${page},12 
	</select>


	<!-- 스크랩노트 등록 -->
  	<insert id="scrapNote">
        <selectKey order="BEFORE" keyProperty="newNoteNum" resultType="int">
            select max(noteNum)+1 from note
        </selectKey> 
		INSERT INTO note 
		            (noteNum,
		             folderName, 
		             userEmail, 
		             noteTitle, 
		             noteContent,
		             noteDate,
		             subjectCode,
		             notePublic,<!--0 비공개  -->
		             noteScrap,<!-- 1 스크랩한글 -->
		             notePNum,
		             noteThumnail) 
		SELECT #{newNoteNum},
			   Replace('스크랩','\r\n', ''), 
		       #{userEmail}, 
		       noteTitle,#{noteContent},noteDate,subjectCode,0,1,#{noteNum},noteThumnail
		FROM   note 
		WHERE  noteNum = #{noteNum};
     </insert> 

	<!-- 참조수 증가 -->
		<update id="updateNoteCount" >
		 update note 
			SET noteCount = (select max(noteCount)+1 from note where noteNum =#{noteNum})
		  WHERE noteNum = #{noteNum}
		</update>
	
	<!-- 노트의 폴더 이동-노트수정시 -->

	<!-- 회원 노트 전체 목록 -관리자-->
		<select id="selectAllNoteAdmin" resultType="NoteVo">
			select n.noteNum, n.noteTitle, n.notePublic, n.noteDate, u.userEmail, u.userEnabled 
				from note n left join users u on n.userEmail = u.userEmail order by n.noteNum desc;		
		</select>

	<!-- 노트 개별 삭제 - 관리자 -->
	<delete id="deleteNoteNumAdmin">
		delete from note where noteNum=#{noteNum};
	</delete>

	<!-- 회원별 노트 검색 -관리자. 데이터 테이블이 다 해주고 있읍니다-->
	
	<!-- 회원별 작성 노트 개수 - 관리자 -->
	<select id="selectNoteCount" parameterType="String" resultType="Integer">
		select count(noteNum) from note where userEmail=#{userEmail};
	</select>
	
	<!-- 회원별 노트 일괄 삭제 -관리자-->
	<delete id="deleteMemNote">
		delete from note where userEmail=#{userEmail};
	</delete>
	
	<!-- 노트 블라인드 처리 -관리자 -->
	<update id="blindNote">
	 	update Note set noteBlind=1 where noteNum = #{noteNum}
	</update> 
	
	<!-- 	
	//NoteVO
	//노트
	//노트번호,폴더명,회원이메일,노트제목,노트내용,작성일,주제코드,참조카운트,
	//글공개여부,스크랩,부모노트번호,신고카운트
	private int noteNum;
	private String folderName;
	private String userEmail;
	private String noteTitle;
	private String noteContent;	
	private Date noteDate;
	private String subjectCode;
	private int noteCount;
	private int notePublic;
	private int noteScrap;
	private int notePNum;
	private int noteCheck;
	
	//NoteCommVO
	//노트 댓글
	//회원이메일,댓글번호,부모댓글번호,댓글작성일,댓글내용,댓글깊이,노트번호,
	private int noteCommNum;
	private String userEmail;
	private int noteNum;
	private int commDept;
	private int commContent;
	private Date commDate;
	private int noteCommPNum;
	-->
	
  
 	<!-- <selectKey order="BEFORE" keyProperty="subjectName" resultType="String">
        select subjectCode from subject where subjectName = #{subjectName}
        </selectKey> 
   update note n
  	join subject s on s.subjectCode = n.subjectCode
  	set m.ever_seq_no = s.ever_seq_no; 
 <foreach collection="subjectNames" item="subject"  open="(" close=")" separator=",">
               </foreach>  -->   
</mapper>











